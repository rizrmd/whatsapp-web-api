openapi: 3.0.0
info:
  title: WhatsApp Web API
  description: A REST API for WhatsApp Web integration that allows pairing, sending messages, and receiving webhooks for incoming messages.
  version: 1.0.0
  contact:
    name: WhatsApp Web API
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Development server
  - url: https://your-domain.com
    description: Production server

paths:
  /pair:
    get:
      tags:
        - WhatsApp Pairing
      summary: Generate QR code for WhatsApp pairing
      description: |
        Generates a new QR code for pairing with WhatsApp. This will disconnect any existing session and create a new pairing session.

        The QR code should be scanned with WhatsApp app (WhatsApp > Linked Devices > Link a device).

        Note: Pairing will replace any existing paired account.
      operationId: pairWhatsApp
      responses:
        '200':
          description: QR code generated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PairResponse'
              example:
                success: true
                message: "QR code generated successfully"
                data:
                  qr_code: "3-4|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0"
                  qr_image_url: "https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=3-4%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C0%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C0"
                  expires_in: 60
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /send:
    post:
      tags:
        - Messaging
      summary: Send message with attachments to WhatsApp number
      description: |
        Sends a text message and/or attachments to a WhatsApp number. The service must be paired with WhatsApp before using this endpoint.

        The phone number should include the country code without the '+' prefix (e.g., "1234567890" for +1 234-567-890).

        **Special behavior**: When sending a text message with a single image attachment, the text will be used as the image caption and sent as one combined message.

        **Attachment requirements**: All attachments must be publicly accessible HTTP/HTTPS URLs. Base64 data is not supported.
      operationId: sendMessage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendMessageRequest'
            examples:
              textOnly:
                summary: Text message only
                value:
                  number: "1234567890"
                  message: "Hello from WhatsApp API!"
              imageOnly:
                summary: Image only
                value:
                  number: "1234567890"
                  attachments:
                    - type: "image"
                      url: "https://example.com/image.jpg"
                      caption: "Check out this image"
              textWithImage:
                summary: Text with image (will be combined)
                value:
                  number: "1234567890"
                  message: "This is the image caption"
                  attachments:
                    - type: "image"
                      url: "https://example.com/image.jpg"
              multipleAttachments:
                summary: Multiple attachments
                value:
                  number: "1234567890"
                  message: "Here are the files"
                  attachments:
                    - type: "image"
                      url: "https://example.com/image.jpg"
                      caption: "First image"
                    - type: "document"
                      url: "https://example.com/document.pdf"
                      filename: "report.pdf"
      responses:
        '200':
          description: Message(s) sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendMessageResponse'
              examples:
                success:
                  summary: Successful send
                  value:
                    success: true
                    message: "Successfully sent 1 message(s)"
                    data:
                      number: "1234567890"
                      message: "Hello from WhatsApp API!"
                      attachments: []
                      sent:
                        - index: 1
                          type: "text"
                          content: "Hello from WhatsApp API!"
        '400':
          $ref: '#/components/responses/BadRequest'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
        '422':
          description: Not paired with WhatsApp
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                success: false
                message: "Not paired with WhatsApp. Please use /pair endpoint first"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /health:
    get:
      tags:
        - System
      summary: Check service health and status
      description: Returns the current status of the WhatsApp service including pairing status and webhook configuration.
      operationId: healthCheck
      responses:
        '200':
          description: Service status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
              example:
                success: true
                message: "WhatsApp service is running"
                data:
                  paired: true
                  connected: true
                  webhook_configured: true

components:
  schemas:
    PairResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the QR code was generated successfully
        message:
          type: string
          description: Response message
        data:
          type: object
          description: QR code data
          properties:
            qr_code:
              type: string
              description: The raw QR code string for manual scanning
              example: "3-4|1|2|3|4|5|6|7|8|9|0|1|2|3|4|5|6|7|8|9|0"
            qr_image_url:
              type: string
              description: URL to QR code image (300x300 PNG)
              example: "https://api.qrserver.com/v1/create-qr-code/?size=300x300&data=3-4%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C0%7C1%7C2%7C3%7C4%7C5%7C6%7C7%7C8%7C9%7C0"
            expires_in:
              type: integer
              description: QR code expiration time in seconds
              example: 60

    SendMessageRequest:
      type: object
      required:
        - number
      properties:
        number:
          type: string
          description: WhatsApp phone number with country code (without '+')
          example: "1234567890"
          pattern: '^[0-9]{10,15}$'
        message:
          type: string
          description: Message content to send. Optional if attachments are provided
          example: "Hello from WhatsApp API!"
          maxLength: 4096
        attachments:
          type: array
          description: List of attachments to send. Optional if message is provided
          items:
            $ref: '#/components/schemas/Attachment'

    SendMessageResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the message(s) were sent successfully
        message:
          type: string
          description: Response message
        data:
          type: object
          description: Sent message details
          properties:
            number:
              type: string
              description: The phone number the message was sent to
            message:
              type: string
              description: The original message content that was sent
            attachments:
              type: array
              description: The original attachments that were sent
              items:
                $ref: '#/components/schemas/Attachment'
            sent:
              type: array
              description: Details of each message that was actually sent
              items:
                type: object
                properties:
                  index:
                    type: integer
                    description: Message index (1-based)
                  type:
                    type: string
                    description: Type of message sent (text, image, document, audio, video, image_with_caption)
                  content:
                    type: string
                    description: Message content or caption
                  filename:
                    type: string
                    description: Filename for document attachments

    Attachment:
      type: object
      required:
        - type
        - url
      properties:
        type:
          type: string
          description: Type of attachment
          enum: ["image", "document", "audio", "video"]
          example: "image"
        url:
          type: string
          description: Publicly accessible HTTP/HTTPS URL to the file
          example: "https://example.com/image.jpg"
        filename:
          type: string
          description: Optional filename for document attachments
          example: "document.pdf"
        caption:
          type: string
          description: Optional caption for image/video attachments
          example: "Check out this image"

    HealthResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Always true for health endpoint
        message:
          type: string
          description: Status message
        data:
          type: object
          properties:
            version:
              type: string
              description: API version
              example: "v1.3.0"
            paired:
              type: boolean
              description: Whether WhatsApp is paired
            connected:
              type: boolean
              description: Whether WhatsApp client is connected
            webhook_configured:
              type: boolean
              description: Whether webhook URL is configured

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          description: Error message
        data:
          type: object
          description: Additional error data (optional)

  responses:
    BadRequest:
      description: Bad request - invalid parameters or request body
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          examples:
            missingNumber:
              summary: Missing number
              value:
                success: false
                message: "Number is required"
            missingContent:
              summary: Missing message and attachments
              value:
                success: false
                message: "Either message or attachments are required"
            invalidNumber:
              summary: Invalid phone number
              value:
                success: false
                message: "Invalid phone number: invalid JID format"

    MethodNotAllowed:
      description: Method not allowed - use POST for this endpoint
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Method not allowed. Use POST"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "Internal server error occurred"

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: API key for authentication (optional, not implemented)

security:
  - ApiKeyAuth: []

tags:
  - name: WhatsApp Pairing
    description: WhatsApp device pairing and session management
  - name: Messaging
    description: Sending and managing WhatsApp messages
  - name: System
    description: System health and status information

externalDocs:
  description: WhatsApp Web API Documentation
  url: https://github.com/your-repo/whatsapp-web-api